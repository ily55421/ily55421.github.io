(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{663:function(s,n,a){"use strict";a.r(n);var e=a(0),v=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"_10-java对象的内存布局"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-java对象的内存布局"}},[s._v("#")]),s._v(" 10 | Java对象的内存布局")]),s._v(" "),n("p",[s._v("在 Java 程序中，我们拥有多种新建对象的方式。除了最为常见的 new 语句之外，我们还可以通过反射机制、Object.clone 方法、反序列化以及 Unsafe.allocateInstance 方法来新建对象。")]),s._v(" "),n("p",[s._v("其中，Object.clone 方法和反序列化通过直接复制已有的数据，来初始化新建对象的实例字段。Unsafe.allocateInstance 方法则没有初始化实例字段，而 new 语句和反射机制，则是通过调用构造器来初始化实例字段。")]),s._v(" "),n("p",[s._v("以 new 语句为例，它编译而成的字节码将包含用来请求内存的 new 指令，以及用来调用构造器的 invokespecial 指令。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\n// Foo foo = new Foo(); 编译而成的字节码\n\n  0 new Foo\n\n  3 dup\n\n  4 invokespecial Foo()\n\n  7 astore_1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("提到构造器，就不得不提到 Java 对构造器的诸多约束。首先，如果一个类没有定义任何构造器的话， Java 编译器会自动添加一个无参数的构造器。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\n// Foo 类构造器会调用其父类 Object 的构造器\n\npublic Foo();\n\n  0 aload_0 [this]\n\n  1 invokespecial java.lang.Object() [8]\n\n  4 return\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("然后，子类的构造器需要调用父类的构造器。如果父类存在无参数构造器的话，该调用可以是隐式的，也就是说 Java 编译器会自动添加对父类构造器的调用。但是，如果父类没有无参数构造器，那么子类的构造器则需要显式地调用父类带参数的构造器。")]),s._v(" "),n("p",[s._v("显式调用又可分为两种，一是直接使用“super”关键字调用父类构造器，二是使用“this”关键字调用同一个类中的其他构造器。无论是直接的显式调用，还是间接的显式调用，都需要作为构造器的第一条语句，以便优先初始化继承而来的父类字段。（不过这可以通过调用其他生成参数的方法，或者字节码注入来绕开。）")]),s._v(" "),n("p",[s._v("总而言之，当我们调用一个构造器时，它将优先调用父类的构造器，直至 Object 类。这些构造器的调用者皆为同一对象，也就是通过 new 指令新建而来的对象。")]),s._v(" "),n("p",[s._v("你应该已经发现了其中的玄机：通过 new 指令新建出来的对象，它的内存其实涵盖了所有父类中的实例字段。也就是说，虽然子类无法访问父类的私有实例字段，或者子类的实例字段隐藏了父类的同名实例字段，但是子类的实例还是会为这些父类实例字段分配内存的。")]),s._v(" "),n("p",[s._v("这些字段在内存中的具体分布是怎么样的呢？今天我们就来看看对象的内存布局。")]),s._v(" "),n("h2",{attrs:{id:"压缩指针"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#压缩指针"}},[s._v("#")]),s._v(" 压缩指针")]),s._v(" "),n("p",[s._v("在 Java 虚拟机中，每个 Java 对象都有一个对象头（object header），这个由标记字段和类型指针所构成。其中，标记字段用以存储 Java 虚拟机有关该对象的运行数据，如哈希码、GC 信息以及锁信息，而类型指针则指向该对象的类。")]),s._v(" "),n("p",[s._v("在 64 位的 Java 虚拟机中，对象头的标记字段占 64 位，而类型指针又占了 64 位。也就是说，每一个 Java  对象在内存中的额外开销就是 16 个字节。以 Integer 类为例，它仅有一个 int 类型的私有字段，占 4 个字节。因此，每一个  Integer 对象的额外内存开销至少是 400%。这也是为什么 Java 要引入基本类型的原因之一。")]),s._v(" "),n("p",[s._v("为了尽量较少对象的内存使用量，64 位 Java 虚拟机引入了压缩指针 [1] 的概念（对应虚拟机选项 -XX:+UseCompressedOops，默认开启），将堆中原本 64 位的 Java 对象指针压缩成 32 位的。")]),s._v(" "),n("p",[s._v("这样一来，对象头中的类型指针也会被压缩成 32 位，使得对象头的大小从 16 字节降至 12 字节。当然，压缩指针不仅可以作用于对象头的类型指针，还可以作用于引用类型的字段，以及引用类型数组。")]),s._v(" "),n("p",[s._v("那么压缩指针是什么原理呢？")]),s._v(" "),n("p",[s._v("打个比方，路上停着的全是房车，而且每辆房车恰好占据两个停车位。现在，我们按照顺序给它们编号。也就是说，停在 0 号和 1 号停车位上的叫 0 号车，停在 2 号和 3 号停车位上的叫 1 号车，依次类推。")]),s._v(" "),n("p",[s._v("原本的内存寻址用的是车位号。比如说我有一个值为 6 的指针，代表第 6 个车位，那么沿着这个指针可以找到 3  号车。现在我们规定指针里存的值是车号，比如 3 指代 3 号车。当需要查找 3 号车时，我便可以将该指针的值乘以 2，再沿着 6 号车位找到 3 号车。")]),s._v(" "),n("p",[s._v("这样一来，32 位压缩指针最多可以标记 2 的 32 次方辆车，对应着 2 的 33 次方个车位。当然，房车也有大小之分。大房车占据的车位可能是三个甚至是更多。不过这并不会影响我们的寻址算法：我们只需跳过部分车号，便可以保持原本车号 *2 的寻址系统。")]),s._v(" "),n("p",[s._v("上述模型有一个前提，你应该已经想到了，就是每辆车都从偶数号车位停起。这个概念我们称之为内存对齐（对应虚拟机选项 -XX:ObjectAlignmentInBytes，默认值为 8）。")]),s._v(" "),n("p",[s._v("默认情况下，Java 虚拟机堆中对象的起始地址需要对齐至 8 的倍数。如果一个对象用不到 8N 个字节，那么空白的那部分空间就浪费掉了。这些浪费掉的空间我们称之为对象间的填充（padding）。")]),s._v(" "),n("p",[s._v("在默认情况下，Java 虚拟机中的 32 位压缩指针可以寻址到 2 的 35 次方个字节，也就是 32GB 的地址空间（超过 32GB 则会关闭压缩指针）。")]),s._v(" "),n("p",[s._v("在对压缩指针解引用时，我们需要将其左移 3 位，再加上一个固定偏移量，便可以得到能够寻址 32GB 地址空间的伪 64 位指针了。")]),s._v(" "),n("p",[s._v("此外，我们可以通过配置刚刚提到的内存对齐选项（-XX:ObjectAlignmentInBytes）来进一步提升寻址范围。但是，这同时也可能增加对象间填充，导致压缩指针没有达到原本节省空间的效果。")]),s._v(" "),n("p",[s._v("举例来说，如果规定每辆车都需要从偶数车位号停起，那么对于占据两个车位的小房车来说刚刚好，而对于需要三个车位的大房车来说，也仅是浪费一个车位。")]),s._v(" "),n("p",[s._v("但是如果规定需要从 4 的倍数号车位停起，那么小房车则会浪费两个车位，而大房车至多可能浪费三个车位。")]),s._v(" "),n("p",[s._v("当然，就算是关闭了压缩指针，Java 虚拟机还是会进行内存对齐。此外，内存对齐不仅存在于对象与对象之间，也存在于对象中的字段之间。比如说，Java 虚拟机要求 long 字段、double 字段，以及非压缩指针状态下的引用字段地址为 8 的倍数。")]),s._v(" "),n("p",[s._v("字段内存对齐的其中一个原因，是让字段只出现在同一 CPU 的缓存行中。如果字段不是对齐的，那么就有可能出现跨缓存行的字段。也就是说，该字段的读取可能需要替换两个缓存行，而该字段的存储也会同时污染两个缓存行。这两种情况对程序的执行效率而言都是不利的。")]),s._v(" "),n("p",[s._v("下面我来介绍一下对象内存布局另一个有趣的特性：字段重排列。")]),s._v(" "),n("h2",{attrs:{id:"字段重排列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字段重排列"}},[s._v("#")]),s._v(" 字段重排列")]),s._v(" "),n("p",[s._v("字段重排列，顾名思义，就是 Java 虚拟机重新分配字段的先后顺序，以达到内存对齐的目的。Java 虚拟机中有三种排列方法（对应 Java 虚拟机选项 -XX:FieldsAllocationStyle，默认值为 1），但都会遵循如下两个规则。")]),s._v(" "),n("p",[s._v("其一，如果一个字段占据 C 个字节，那么该字段的偏移量需要对齐至 NC。这里偏移量指的是字段地址与对象的起始地址差值。")]),s._v(" "),n("p",[s._v("以 long 类为例，它仅有一个 long 类型的实例字段。在使用了压缩指针的 64 位虚拟机中，尽管对象头的大小为 12 个字节，该 long 类型字段的偏移量也只能是 16，而中间空着的 4 个字节便会被浪费掉。")]),s._v(" "),n("p",[s._v("其二，子类所继承字段的偏移量，需要与父类对应字段的偏移量保持一致。")]),s._v(" "),n("p",[s._v("在具体实现中，Java 虚拟机还会对齐子类字段的起始位置。对于使用了压缩指针的 64 位虚拟机，子类第一个字段需要对齐至 4N；而对于关闭了压缩指针的 64 位虚拟机，子类第一个字段则需要对齐至 8N。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\nclass A {\n\n  long l;\n\n  int i；\n\n}\n\n \n\nclass B extends A {\n\n  long l;\n\n  int i;\n\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("我在文中贴了一段代码，里边定义了两个类 A 和 B，其中 B 继承 A。A 和 B 各自定义了一个 long 类型的实例字段和一个 int 类型的实例字段。下面我分别打印了 B 类在启用压缩指针和未启用压缩指针时，各个字段的偏移量。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\n# 启用压缩指针时，B 类的字段分布\n\nB object internals:\n\n OFFSET  SIZE   TYPE DESCRIPTION\n\n      0     4        (object header)\n\n      4     4        (object header)\n\n      8     4        (object header)\n\n     12     4    int A.i                                       0\n\n     16     8   long A.l                                       0\n\n     24     8   long B.l                                       0\n\n     32     4    int B.i                                       0\n\n     36     4        (loss due to the next object alignment)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[s._v("当启用压缩指针时，可以看到 Java 虚拟机将 A 类的 int 字段放置于 long 字段之前，以填充因为 long 字段对齐造成的 4 字节缺口。由于对象整体大小需要对齐至 8N，因此对象的最后会有 4 字节的空白填充。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\n# 关闭压缩指针时，B 类的字段分布\n\nB object internals:\n\n OFFSET  SIZE   TYPE DESCRIPTION\n\n      0     4        (object header)\n\n      4     4        (object header)\n\n      8     4        (object header)\n\n     12     4        (object header)\n\n     16     8   long A.l\n\n     24     4    int A.i\n\n     28     4        (alignment/padding gap)                  \n\n     32     8   long B.l\n\n     40     4    int B.i\n\n     44     4        (loss due to the next object alignment)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("p",[s._v("当关闭压缩指针时，B 类字段的起始位置需对齐至 8N。这么一来，B 类字段的前后各有 4 字节的空白。那么我们可不可以将 B 类的 int 字段移至前面的空白中，从而节省这 8 字节呢？")]),s._v(" "),n("p",[s._v("我认为是可以的，并且我修改过后的 Java 虚拟机也没有跑崩。由于 HotSpot 中的这块代码年久失修，公司的同事也已经记不得是什么原因了，那么姑且先认为是一些历史遗留问题吧。")]),s._v(" "),n("p",[s._v("Java 8 还引入了一个新的注释 @Contended，用来解决对象字段之间的虚共享（false sharing）问题 [2]。这个注释也会影响到字段的排列。")]),s._v(" "),n("p",[s._v("虚共享是怎么回事呢？假设两个线程分别访问同一对象中不同的 volatile 字段，逻辑上它们并没有共享内容，因此不需要同步。")]),s._v(" "),n("p",[s._v("然而，如果这两个字段恰好在同一个缓存行中，那么对这些字段的写操作会导致缓存行的写回，也就造成了实质上的共享。（volatile 字段和缓存行的故事我会在之后的篇章中详细介绍。）")]),s._v(" "),n("p",[s._v("Java 虚拟机会让不同的 @Contended 字段处于独立的缓存行中，因此你会看到大量的空间被浪费掉。具体的分布算法属于实现细节，随着 Java 版本的变动也比较大，因此这里就不做阐述了。")]),s._v(" "),n("p",[s._v("如果你感兴趣，可以利用实践环节的工具，来查阅 Contended 字段的内存布局。注意使用虚拟机选项  -XX:-RestrictContended。如果你在 Java 9 以上版本试验的话，在使用 javac 编译时需要添加  --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAME")]),s._v(" "),n("h2",{attrs:{id:"总结和实践"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结和实践"}},[s._v("#")]),s._v(" 总结和实践")]),s._v(" "),n("p",[s._v("今天我介绍了 Java 虚拟机构造对象的方式，所构造对象的大小，以及对象的内存布局。")]),s._v(" "),n("p",[s._v("常见的 new 语句会被编译为 new 指令，以及对构造器的调用。每个类的构造器皆会直接或者间接调用父类的构造器，并且在同一个实例中初始化相应的字段。")]),s._v(" "),n("p",[s._v("Java 虚拟机引入了压缩指针的概念，将原本的 64 位指针压缩成 32 位。压缩指针要求 Java 虚拟机堆中对象的起始地址要对齐至 8 的倍数。Java 虚拟机还会对每个类的字段进行重排列，使得字段也能够内存对齐。")]),s._v(" "),n("p",[s._v("今天的实践环节比较简单，你可以使用我在工具篇中介绍过的 JOL 工具，来打印你工程中的类的字段分布情况。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\ncurl -L -O http://central.maven.org/maven2/org/openjdk/jol/jol-cli/0.9/jol-cli-0.9-full.jar\n\njava -cp jol-cli-0.9-full.jar org.openjdk.jol.Main internals java.lang.String\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("[1] https://wiki.openjdk.java.net/display/HotSpot/CompressedOops\n[2] http://openjdk.java.net/jeps/142")]),s._v(" "),n("h2",{attrs:{id:"精选留言-28"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#精选留言-28"}},[s._v("#")]),s._v(" 精选留言(28)")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("godtrue")]),s._v(" "),n("p",[s._v("2018-08-13")]),s._v(" "),n("p",[s._v("31")]),s._v(" "),n("p",[s._v("小结\n1:Java中创建对象的方式")]),s._v(" "),n("p",[s._v("1-1:new -通过调用构造器来初始化实例字段")]),s._v(" "),n("p",[s._v("1-2:反射-通过调用构造器来初始化实例字段")]),s._v(" "),n("p",[s._v("1-3:Object.clone-通过直接复制已有的数据，来初始化新建对象的实例字段")]),s._v(" "),n("p",[s._v("1-4:反序列化-通过直接复制已有的数据，来初始化新建对象的实例字段")]),s._v(" "),n("p",[s._v("1-5:Unsafe.allocateInstance-没有初始化对象的实例字段")]),s._v(" "),n("p",[s._v("2:Java对象的空间占用")]),s._v(" "),n("p",[s._v("2-1:通过new创建的对象，涵盖了它所有父类中的对象实例的字段")]),s._v(" "),n("p",[s._v("2-2:对象头，由标记字段和类型指针构成")]),s._v(" "),n("p",[s._v("2-3:标记字段，用于存储Java虚拟机有关该对象的运行数据，比如：哈希码、GC信息、锁信息等")]),s._v(" "),n("p",[s._v("2-4:类型指针，用于指向该对象的类")]),s._v(" "),n("p",[s._v("2-5:此对象的实例字段对应的内存空间")]),s._v(" "),n("p",[s._v("3:压缩指针\nJVM的内存空间有限且昂贵，所以，能缩减的就缩减，通过一定的算法改进压缩类型指针的空间后仍可以寻址到对象的实例对应的类，所以，就采用了")]),s._v(" "),n("p",[s._v("4:字段重排\n意思是JVM会重新分配字段的位置，和我们Java源码中属性声明的位置存在差异，猜想Java编译器编译后的字节码是没有改变源码中字段声明的位置的，这样做是为了更好的实现内存对齐，内存对齐本质上会浪费一定的内存空间，不过可以减少内存行的读取次数，通过一消一涨的比对发现这样对于JVM的性能有一定的提高，所以，也就使用了这种方式，浪费点空间能提高性能也是值得的")]),s._v(" "),n("p",[s._v("疑问❓\n1:为什么一个子类即使无法访问父类的私有实例字段，或者子类实例字段隐藏了父类的同名实例字段，子类的实例还是会为这些父类实例字段分配内存呢？\n另外，如果采用指针指向的方式定位父类实例的内容是否能更节省内存空间？")]),s._v(" "),n("p",[s._v("2:五种创建对象的方式，通过new指令新建出来的对象，他的内存其实涵盖了所有父类中的实例字段，其他的方式是怎样的哪？")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("life is ...")]),s._v(" "),n("p",[s._v("2018-10-11")]),s._v(" "),n("p",[s._v("15")]),s._v(" "),n("p",[s._v("对象头")]),s._v(" "),n("p",[s._v("每个对象都有一个对象头，对象头包括两部分，标记信息和类型指针。")]),s._v(" "),n("p",[s._v("标记信息包括哈希值，锁信息，GC信息。类型指针指向这个对象的class。")]),s._v(" "),n("p",[s._v("两个信息分别占用8个字节，所以每个对象的额外内存为16个字节。很消耗内存。")]),s._v(" "),n("p",[s._v("压缩指针")]),s._v(" "),n("p",[s._v("为了减少类型指针的内存占用，将64位指针压缩至32位，进而节约内存。之前64位寻址，寻的是字节。现在32位寻址，寻的是变量。再加上内存对齐(补齐为8的倍数)，可以每次寻变量都以一定的规则寻找，并且一定可以找得到。")]),s._v(" "),n("p",[s._v("内存对齐")]),s._v(" "),n("p",[s._v("内存对齐的另一个好处是，使得CPU缓存行可以更好的实施。保证每个变量都只出现在一条缓存行中，不会出现跨行缓存。提高程序的执行效率。")]),s._v(" "),n("p",[s._v("字段重排序")]),s._v(" "),n("p",[s._v("其实就是更好的执行内存对齐标准，会调整字段在内存中的分布，达到方便寻址和节省空间的目的。")]),s._v(" "),n("p",[s._v("虚共享")]),s._v(" "),n("p",[s._v("当两个线程分别访问一个对象中的不同volatile字段，理论上是不涉及变量共享和同步要求的。但是如果两个volatile字段处于同一个CPU缓存行中，对其中一个volatile字段的写操作，会导致整个缓存行的写回和读取操作，进而影响到了另一个volatile变量，也就是实际上的共享问题。")]),s._v(" "),n("p",[s._v("@Contented注解")]),s._v(" "),n("p",[s._v("该注解就是用来解决虚共享问题的，被该注解标识的变量，会独占一个CPU缓存行。但也因此浪费了大量的内存空间。")]),s._v(" "),n("p",[s._v("作者回复: 赞总结！")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("amourling")]),s._v(" "),n("p",[s._v("2018-08-13")]),s._v(" "),n("p",[s._v("9")]),s._v(" "),n("p",[s._v("作者大大辛苦了，货很干，搭配《深入理解java虚拟机》会很香")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("三木子")]),s._v(" "),n("p",[s._v("2018-08-13")]),s._v(" "),n("p",[s._v("6")]),s._v(" "),n("p",[s._v("有一个小白问题，new一个对象(继承一个类)会调用父类构造器，这个可以理解，因为对象可能调用父类方法。那么为什么new对象会调用到object呢？这有什么用意吗？")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("倔强")]),s._v(" "),n("p",[s._v("2018-08-14")]),s._v(" "),n("p",[s._v("5")]),s._v(" "),n("p",[s._v("也就是说默认情况下，小于32G的堆内存中的对象引用为4个字节，一旦堆内存大于32G，对象引用为8个字节")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("清歌")]),s._v(" "),n("p",[s._v("2018-11-14")]),s._v(" "),n("p",[s._v("3")]),s._v(" "),n("p",[s._v("讲内存布局没有图示。如果能配一些图来说明就更清晰了，纯文字不直观")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("Mr.钧👻")]),s._v(" "),n("p",[s._v("2018-10-16")]),s._v(" "),n("p",[s._v("2")]),s._v(" "),n("p",[s._v("想请教老师大大几个问题：\n1、什么是CUP缓存行？\n2、如果跨缓存行的字段，为什么会降低执行效率？是因为某些读取程序，一行一行的读效率较高？还是因为以行分割呢？\n3、明显启用压缩指针，性能更高，但是为什么还会在64位情况下，不启用压缩指针的情况呢？ 是因为CPU运行速度更快，可以护士不压缩指针导致的内存浪费吗？")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("发条橙子 ...")]),s._v(" "),n("p",[s._v("2019-03-22")]),s._v(" "),n("p",[s._v("1")]),s._v(" "),n("p",[s._v("老师， 对象头中的类型指针只是为了指该对象的类 ， 使用了压缩指针还有32位  。可以有32g的地址空间， 一个类能用到 32 G的地址空间么?????")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("xlogic")]),s._v(" "),n("p",[s._v("2018-09-29")]),s._v(" "),n("p",[s._v("1")]),s._v(" "),n("p",[s._v("字段重排列")]),s._v(" "),n("p",[s._v("其一，如果一个字段占据 C 个字节， 那么该字段的偏移量需要对齐至 NC。这里的偏移量指的是字段地址与对象的起始地址差值")]),s._v(" "),n("p",[s._v("以 long 类为例，它仅有一个 long 类型的实例字段。在使用了压缩指针的 64 位虚拟机中，尽管对象头的大小为 12 个字节，该 long 类型字段的偏移量也只能是 16，而中间空着的 4 个字节便会被浪费掉。")]),s._v(" "),n("p",[s._v("个人理解：1. 应该是 Long 类型；2. 因为 long 字段的占 8 个字节，所以偏移量是 N8，比12大的最接近的数就是 16，所以偏移量就是16，也就是说字段与对象的起始位置差是16。")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("Geek_98716...")]),s._v(" "),n("p",[s._v("2018-09-22")]),s._v(" "),n("p",[s._v("1")]),s._v(" "),n("p",[s._v("老师，请教您几个问题\n1：每个类都有一个对应的class对象，那么这class对象是什么时候生成的，存储jvm的哪个区域？\n2：类实例对象object header中的类型指针其实就是指向该类所属class的对象的指针吗？\n3：class对象的内存结构又是什么样子的呢？类似于普通Java实例对象吗？\nps：这个指针压缩的原理有些困扰到我了。。。求解惑！！！")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("everyok22")]),s._v(" "),n("p",[s._v("2018-08-22")]),s._v(" "),n("p",[s._v("1")]),s._v(" "),n("p",[s._v("你文章里说： 64位的JVM中，不采用压缩指针的方式，标记字段与类型指针分别占用8个字节，而采用了压缩指针标记字段与类型指针都会压成32位（8字节）那对象头不是只占用8个字节么，为什么你说是12个字节")]),s._v(" "),n("p",[s._v("作者回复: 标记字段没有被压缩。")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("大能猫")]),s._v(" "),n("p",[s._v("2018-08-14")]),s._v(" "),n("p",[s._v("1")]),s._v(" "),n("p",[s._v("最近研究String时遇到一个跟Java内存相关的问题：常量池里到底有没有存放对象？\n常量池主要存放两大类常量：字面量（Literal）和符号引用（Symbolic Reference）；\n如果常量池里有一个“hello”的字面量，这个字面量算是一个对象吗？如果不算对象，那么它所指向的对象又存放在哪里呢")]),s._v(" "),n("p",[s._v("作者回复: String literal指向的对象存放在JVM的String pool里。")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("DesertSnow")]),s._v(" "),n("p",[s._v("2019-04-10")]),s._v(" "),n("p",[s._v("超类啊这是")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("天王")]),s._v(" "),n("p",[s._v("2019-03-25")]),s._v(" "),n("p",[s._v("一个JAVA对象可以通过new，反序列化，clone等多种方式创建对象。new的时候，首先会为对象申请内存，然后调用构造器创建对象，初始化字段，会默认调用无参构造器对象，也会先调用父类的构造器，如果父类构造器无参，则隐式调用，如果是有参构造函数，则显式调用。子类的实例会为父类实例字段分配内存。\n在内存中的布局，创建对象的时候会在为对象分配内存，一个对象有对象头，对象头里面存储的是标记字段和类型指针，对象头里面有哈希码，gc等信息，类型指针存的是指向类的引用，各自占用64位，8个字节，这是每个对象额外存储的，这样所以引入了基础类型。压缩指针可以将类型指针压成32位的，节省4个字节，压缩指针还可以压缩字段以及引用类型数组。压缩指针的原理，java对象默认的起始位置是8的位数，如果一个对象用不到8N，剩下的空间就浪费了，浪费的空间叫对象间的填充。对齐方式叫内存对齐，可以通过内存对齐选项来提升寻址范围，但是也容易导致对象填充。内存对象不仅存在于对象与对象之间，也存在于字段与字段中间，字段对齐的一个原因是，让字段出现在同一CPU的缓存行中，跨缓存行会影响执行效率。字段重排列，会重新分配字段的顺序，以达到内存对齐的目的。有2个选择，一个是字段偏移量是NC，子类字段的偏移量需要与父类对应字段的偏移量保持一致。使用了压缩指针的对象，子类第一个字段需要对齐至4N，没用压缩指针的对齐至8N。")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("志远")]),s._v(" "),n("p",[s._v("2019-03-01")]),s._v(" "),n("p",[s._v("因此，每一个 Integer 对象的额外内存开销至少是 400%。这句话实在令人费解，400%的单位是什么，4字节？")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("suynan")]),s._v(" "),n("p",[s._v("2019-02-20")]),s._v(" "),n("p",[s._v("上班间隙悄悄看了开头的一点点，真的好多干货，准备一周时间啃完一遍")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("Nevermore")]),s._v(" "),n("p",[s._v("2019-01-08")]),s._v(" "),n("p",[s._v("以 long 类为例，它仅有一个 long 类型的实例字段。在使用了压缩指针的 64 位虚拟机中，尽管对象头的大小为 12 个字节，该 long 类型字段的偏移量也只能是 16，而中间空着的 4 个字节便会被浪费掉。")]),s._v(" "),n("p",[s._v("long存储的值占用8个字节，默认情况是以8N的位置开始占用的，所以long一共占用20个字节。所以当存储下一个long时，只能从第24个字节的位置开始存，那么20-23的位置就被浪费了。")]),s._v(" "),n("p",[s._v("老师，我这理解有问题么？")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("Nevermore")]),s._v(" "),n("p",[s._v("2019-01-08")]),s._v(" "),n("p",[s._v("在对压缩指针解引用时，我们需要将其左移 3 位，再加上一个固定偏移量，便可以得到能够寻址 32GB 地址空间的伪 64 位指针了。")]),s._v(" "),n("p",[s._v("这句话不理解，老师能否具体讲解下。")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("橙生北国")]),s._v(" "),n("p",[s._v("2018-12-28")]),s._v(" "),n("p",[s._v("这时候写留言不知道能不能跟上，老师，请问如果我new一个对象，它会影响JVM五个区域中的几个？大概是怎么影响的。")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("Geek_98716...")]),s._v(" "),n("p",[s._v("2018-09-21")]),s._v(" "),n("p",[s._v("老师，“堆中原本 64 位的 Java 对象指针压缩成 32 位”这几句话中的“64位java对象指针”是个啥？在哪里？为什么会影响想到对象头中类型指针？")])])}),[],!1,null,null,null);n.default=v.exports}}]);