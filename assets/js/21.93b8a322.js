(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{619:function(s,a,t){"use strict";t.r(a);var _=t(0),v=Object(_.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"线性表-链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性表-链表"}},[s._v("#")]),s._v(" 线性表_链表")]),s._v(" "),a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[s._v("#")]),s._v(" 介绍")]),s._v(" "),a("p",[a("strong",[s._v("不保存在连续存储空间中，而每一个元素里都保存了到下一个元素的地址的数据结构，我们称之为链表（Linked List）")]),s._v("。链表上的每一个元素又可以称它为"),a("strong",[s._v("节点（Node）")]),s._v("，而链表中第一个元素，称它为"),a("strong",[s._v("头节点（Head Node）")]),s._v("，最后一个元素称它为"),a("strong",[s._v("尾节点（Tail Node）")]),s._v("。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/12/11/19-57-56-6ddd2b757d82a08ba3c8dacb743f19f3-image-20221211195756837-84e3.png",alt:"image-20221211195756837"}})]),s._v(" "),a("h2",{attrs:{id:"顺序访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序访问"}},[s._v("#")]),s._v(" 顺序访问")]),s._v(" "),a("p",[s._v("与数组不同的是，我们无法使用一个固定的公式来直接算出某一个特定元素的地址，从而得到那个元素的值。要找到链表中的第 N 个元素的值，我们必须要从第一个元素开始，一个一个地遍历 N 次才能找到第 N 个元素，这种访问方式，我们就称之为"),a("strong",[s._v("顺序访问（Sequential Access）")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"数组与链表的性能差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组与链表的性能差异"}},[s._v("#")]),s._v(" 数组与链表的性能差异")]),s._v(" "),a("p",[a("strong",[s._v("数组和链表的对比，并不能局限于时间复杂度")]),s._v("。而且，在"),a("strong",[s._v("实际的软件开发中，不能仅仅利用复杂度分析就决定使用哪个数据结构来存储数据。")])]),s._v(" "),a("ol",[a("li",[s._v("数组的缺点是"),a("strong",[s._v("大小固定，一经声明就要占用整块连续内存空间")]),s._v("。")]),s._v(" "),a("li",[a("strong",[s._v("链表本身没有大小的限制，天然地支持动态扩容，我觉得这也是它与数组最大的区别")]),s._v("。")]),s._v(" "),a("li",[a("strong",[s._v("数据拷贝的操作是非常耗时的")]),s._v("。")]),s._v(" "),a("li",[a("strong",[s._v("如果你的代码对内存的使用非常苛刻，那数组就更适合你")]),s._v("。")])]),s._v(" "),a("h3",{attrs:{id:"空间利用率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空间利用率"}},[s._v("#")]),s._v(" 空间利用率")]),s._v(" "),a("p",[a("strong",[s._v("数组的空间利用率相当于本来需要的大小除以创建出来数组的大小")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("链表的空间利用率上相当于值的大小除以值的大小和节点地址大小的和")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[s._v("#")]),s._v(" 时间复杂度")]),s._v(" "),a("p",[s._v("访问数组元素的时间复杂度是 O(1)。而因为链表顺序访问的这个特性，访问链表中第 N 个元素需要从第一个元素一直遍历到第 N 个元素，所以平均下来的时间复杂度是 O(N)。")]),s._v(" "),a("p",[s._v("对于数组来说，插入操作无论是发生在数组结尾还是发生在数组的中间，因为"),a("strong",[s._v("都需要重新创建一个新的数组")]),s._v("出来，并"),a("strong",[s._v("复制")]),s._v("一遍之前的元素到新的数组中，所以平均的时间复杂度都是 O(N)。")]),s._v(" "),a("p",[s._v("而对于链表来说，要是我们一直都能维护一个"),a("strong",[s._v("尾节点")]),s._v("的地址的话，那么插入一个新的元素只需要 O(1) 的时间复杂度。而当插入一个元素到"),a("strong",[s._v("链表中间")]),s._v("的时候，因为链表顺序访问的这个特性，我们需要先遍历一遍链表，从第一个节点开始直到第 N 个位置，然后再进行插入，所以平均下来的"),a("strong",[s._v("时间复杂度是 O(N)")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"链表和数组比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表和数组比较"}},[s._v("#")]),s._v(" 链表和数组比较")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("插入、删除、随机访问操作的时间复杂度正好相反")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("操作")]),s._v(" "),a("th",[s._v("数组")]),s._v(" "),a("th",[s._v("链表")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("插入删除")]),s._v(" "),a("td",[s._v("O(n)")]),s._v(" "),a("td",[s._v("O(1)")])]),s._v(" "),a("tr",[a("td",[s._v("随机访问")]),s._v(" "),a("td",[s._v("O(1)")]),s._v(" "),a("td",[s._v("O(n)")])])])])]),s._v(" "),a("li",[a("p",[s._v("在实际开发中，不能单纯使用复杂度分析来判断选择哪种数据结构来存储数据。数组本质上是连续的内存空间，"),a("strong",[s._v("CPU 的缓存机制")]),s._v("会预先读取数组中的数据，所以访问效率更高。而链表不是连续存储的，因此 CPU 缓存没办法有效预读链表数据。")]),s._v(" "),a("blockquote",[a("p",[s._v("CPU 在从内存读取数据的时候，除了把要访问的地址的数据读取进来，还要读取附近的一个数据块并保存到 CPU 缓存中。这样下次访问内存的时候，就会先从 CPU 缓存开始查询，如果找到了就不需要从内存中读取，从而使得访问数据更快。那么对于数组来说，因为是连续的，所以加载数组中某数据的时候，会把数组中的其他数据也加载进来，从而导致数组的访问效率会更高。然而链表不是连续存储的，因此加载附近的数据块不一定会加载到链表中的数据。")])])]),s._v(" "),a("li",[a("p",[s._v("数组的缺点是"),a("strong",[s._v("大小固定")]),s._v("，那么当数组出现不够用的情况时，需要申请一个更大的内存空间，然后把数据迁移过去，这个是非常耗时的。而链表本身没有大小的限制，天然支持动态扩容。这是另一个区别。")])]),s._v(" "),a("li",[a("p",[s._v("链表进行频繁的插入、删除等操作会导致频繁的内存申请和释放，容易造成"),a("strong",[s._v("内存碎片")]),s._v("。这对 Java 来说会导致频发的 GC（Garbage Collection，垃圾回收）。而数组相对来说没那么频繁。")])])]),s._v(" "),a("h2",{attrs:{id:"链表的各种形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表的各种形式"}},[s._v("#")]),s._v(" 链表的各种形式")]),s._v(" "),a("h3",{attrs:{id:"单向链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单向链表"}},[s._v("#")]),s._v(" "),a("strong",[s._v("单向链表")])]),s._v(" "),a("p",[s._v("在一个节点中既保存了我们需要的数据，也保存了指向下一个节点地址信息的链表，称之为"),a("strong",[s._v("单向链表（Singly Linked List）")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/12/11/20-01-12-0b9f892a39ffc5e15f484c65e651cd51-Cgq2xl4AIOaASKi0AAAtOVcJUJY844-bcaa54-9807.png",alt:"img"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/12/11/20-03-16-f0e24c5e18e3789d8c49da35a6f5af4f-image-20220521225254857-52895a-f8fc.png",alt:"image-20220521225254857"}})]),s._v(" "),a("h3",{attrs:{id:"双向链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双向链表"}},[s._v("#")]),s._v(" "),a("strong",[s._v("双向链表")])]),s._v(" "),a("p",[s._v("在一个节点中保存了我们需要的数据也保存了连向下一个和上一个节点地址信息的链表，称之为"),a("strong",[s._v("双向链表（Doubly Linked List）")]),s._v("。和链表中尾节点的下一个节点只保存空地址一样，链表中头节点的上一个节点地址也保存着空地址")]),s._v(" "),a("p",[s._v("双向链表"),a("strong",[s._v("需要额外的两个空间来存储后继结点和前驱结点的地址")]),s._v("。所以，如果存储同样多的数据，双向链表要比单链表占用更多的内存空间。虽然两个指针比较浪费存储空间，但可以支持"),a("strong",[s._v("双向遍历")]),s._v("，这样也带来了双向链表操作的灵活性。")]),s._v(" "),a("p",[s._v("双向链表"),a("strong",[s._v("在某些情况下的插入、删除等操作都要比单链表简单、高效。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/12/11/20-01-12-d0f086ee2b7cbe0da8849fa9700c5c76-CgpOIF4AIOaASfugAAAv9abtHU0606-80940e-db7f.png",alt:"img"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/12/11/20-03-48-c9161256dcb7337ef2bdce46fb88f697-image-20220521225318483-412c4f-a6c5.png",alt:"image-20220521225318483"}})]),s._v(" "),a("h3",{attrs:{id:"循环链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环链表"}},[s._v("#")]),s._v(" "),a("strong",[s._v("循环链表")])]),s._v(" "),a("p",[s._v("如果将尾节点指向下一个节点地址的信息更新成指向头节点的话，这样整个链表就形成了一个环，这种链表称之为"),a("strong",[s._v("循环链表（Circular Linked List）")])]),s._v(" "),a("p",[a("strong",[s._v("循环链表")]),s._v("的优点是"),a("strong",[s._v("从链尾到链头比较方便")]),s._v("。当要"),a("strong",[s._v("处理的数据具有环型结构")]),s._v("特点时，就特别适合采用循环链表。比如著名的"),a("a",{attrs:{href:"https://gitee.com/link?target=https%3A%2F%2Fzh.wikipedia.org%2Fwiki%2F%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98",target:"_blank",rel:"noopener noreferrer"}},[s._v("约瑟夫问题"),a("OutboundLink")],1),s._v("。尽管用单链表也可以实现，但是用循环链表实现的话，代码就会简洁很多。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/12/11/20-01-12-0f4357cbd476884abbff516d68692040-Cgq2xl4AIOaAQyG7AAA7Z4BCAiw317-6bef9d-9544.png",alt:"img"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/12/11/20-03-35-2497e0d7d66813bfa4ab23b5e1eb8b5a-image-20220521225311346-ea300d-3994.png",alt:"image-20220521225311346"}})]),s._v(" "),a("h3",{attrs:{id:"双向循环链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双向循环链表"}},[s._v("#")]),s._v(" "),a("strong",[s._v("双向循环链表")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/12/11/20-05-13-6d1506300445374fc4e5529b530b816d-image-20220521225329426-fc4c78-9ca3.png",alt:"image-20220521225329426"}})]),s._v(" "),a("h2",{attrs:{id:"链表代码的撰写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表代码的撰写"}},[s._v("#")]),s._v(" 链表代码的撰写")]),s._v(" "),a("p",[s._v("争哥根据自己的学习经历和工作经验，总结了几个写链表代码技巧。")]),s._v(" "),a("h3",{attrs:{id:"_1-理解指针或引用的含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-理解指针或引用的含义"}},[s._v("#")]),s._v(" 1. 理解指针或引用的含义")]),s._v(" "),a("p",[s._v("C 语言有“指针”的概念，有些语言没有指针的概念，但是有“引用”的概念。**不管是指针还是引用，意思都是一样的，都是存储所指对象的内存地址。**比如 "),a("code",[s._v("p->next = p->next->next")]),s._v(" 表示 p 的 next 指针存储了 p 结点的下下一个结点的内存地址。")]),s._v(" "),a("h3",{attrs:{id:"_2-警惕指针丢失和内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-警惕指针丢失和内存泄漏"}},[s._v("#")]),s._v(" 2. 警惕指针丢失和内存泄漏")]),s._v(" "),a("p",[a("strong",[s._v("写链表代码的时候，一定要注意插入或者删除的顺序，否则很容易把指针或者结点给弄丢")]),s._v("（这个自己确实碰到过哈哈哈哈）。比如要在 a、b 两个结点之间插入结点 x，假设当前指针 p 指向结点 a")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/12/11/20-10-12-bfdddffe54aa6f815ef0d744cfe6e8ba-image-20220521225922865-bd08af-5979.png",alt:"image-20220521225922865"}})]),s._v(" "),a("p",[s._v("如果使用下面这段代码则会发生指针丢失和内存泄露，因为 x->next 最终指向了自己。整个链表被断成两段，结点 b 及之后的所有结点都无法访问到了。")]),s._v(" "),a("div",{staticClass:"language-c# line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("p->next = x;  // 将p的next指针指向x结点；\nx->next = p->next;  // 将x的结点的next指针指向b结点；\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("另外，对于 C 语言来说，内存管理是由程序员负责的。如果没有手动释放结点对应的内存空间，那么会导致内存泄露。所以插入结点的时候，要注意先后顺序。对于刚才的代码，只要调换一下顺序即可。同理，删除结点对于 C 语言来说也一定要记得释放内存，否则也会出现内存泄露的问题。Java 因为有 GC 所以不需要考虑那么多。")]),s._v(" "),a("h3",{attrs:{id:"_3-利用哨兵简化实现难度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-利用哨兵简化实现难度"}},[s._v("#")]),s._v(" 3. 利用哨兵简化实现难度")]),s._v(" "),a("p",[s._v("**哨兵的主要作用是让代码变得统一。**因为在对链表进行插入、删除操作时，需要对插入第一个结点或者删除最后一个结点的情况进行特殊处理，如下所示。但是，这样让代码变得很繁琐、不简洁。")]),s._v(" "),a("div",{staticClass:"language-c# line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 非第一个结点插入\nnext_node->next = p->next;\np->next = new_node;\n\n// 第一个结点插入\nif (head == null) {\n    head = new_node;\n}\n\n// 删除非最后一个结点\np->next = p->next->next;\n\n// 删除最后一个结点\nif (head->next == null) {\n    head = null;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("为此可以引入哨兵结点，让上述代码变得统一一点。比如不管链表是不是为空，让 head 一直指向一个结点，这个结点是不带数据的，只有指针域，如下所示。这样删除最后一节点的时候和插入第一个结点的时候，操作就都变得统一了。而这个结点就是哨兵结点，我们把有哨兵结点在的链表称为带头链表。（PS：哨兵的意思让我想到了当兵的，当兵的就是要整齐统一的，因此引入哨兵之后，就变得统一了）")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/12/11/20-11-27-849c7cd4e05b9150cc6fdf387cb98cf2-image-20220521225934559-865a47-6476.png",alt:"image-20220521225934559"}})]),s._v(" "),a("h3",{attrs:{id:"_4-重点留意边界条件处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-重点留意边界条件处理"}},[s._v("#")]),s._v(" 4. 重点留意边界条件处理")]),s._v(" "),a("p",[s._v("**在编写的时候一定要多注意边界条件是否考虑到了，在边界条件下能否正确运行。**边界条件，个人理解就是极端情况，比如链表为空等。那么链表代码需要检查的边界条件主要有：")]),s._v(" "),a("ul",[a("li",[s._v("链表为空的时候；")]),s._v(" "),a("li",[s._v("链表只包含一个结点的时候；")]),s._v(" "),a("li",[s._v("链表只包含两个结点的时候；")]),s._v(" "),a("li",[s._v("处理头结点和尾结点的时候；")])]),s._v(" "),a("blockquote",[a("p",[s._v("在写任何代码的时候，一定要多想想，你的"),a("strong",[s._v("代码在运行的时候，可能会遇到哪些边界情况或者异常情况")]),s._v("，针对这些情况一定要处理，这样代码才能健壮。")])]),s._v(" "),a("h3",{attrs:{id:"_5-举例画图-辅助思考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-举例画图-辅助思考"}},[s._v("#")]),s._v(" 5. 举例画图，辅助思考")]),s._v(" "),a("p",[a("strong",[s._v("举例法")]),s._v("和"),a("strong",[s._v("画图法")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("针对链表的操作，有时候光在脑子里比较难想清楚，那么可以使用举例法和画图法，这样会清晰许多。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/12/11/20-13-14-598c72c927f2203d707248cad3952660-image-20220521225944948-db2195-d2ac.png",alt:"image-20220521225944948"}})]),s._v(" "),a("h3",{attrs:{id:"_6-多写多练-没有捷径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-多写多练-没有捷径"}},[s._v("#")]),s._v(" 6. 多写多练，没有捷径")]),s._v(" "),a("p",[s._v("**自己把常见的链表操作多写几遍，出问题就一点一点调试，孰能生巧。**写链表代码是最考研逻辑思维能力的，因为链表代码到处都是指针的操作、边界条件的处理，稍有不慎就会产生 bug。链表代码写得好坏，可以看出一个人写代码是否够细心，考虑问题是否全面，思维是否缜密等（这也是面试官喜欢让人手写链表代码的原因）。那么针对链表代码，可以拿这几个链表操作练练手，一定要练啊！")]),s._v(" "),a("ul",[a("li",[s._v("单链表反转")]),s._v(" "),a("li",[s._v("链表中环的检测")]),s._v(" "),a("li",[s._v("两个有序的链表合并")]),s._v(" "),a("li",[s._v("删除链表倒数第 n 个结点")]),s._v(" "),a("li",[s._v("求链表的中间结点")])]),s._v(" "),a("blockquote",[a("p",[s._v("LeetCode 上的题号分别是 206，141，21，19，876。")])]),s._v(" "),a("h2",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[s._v("#")]),s._v(" 应用场景")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("使用单链表来实现 LRU 缓存淘汰算法。首先维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，从链表头开始顺序遍历链表。")]),s._v(" "),a("ul",[a("li",[s._v("如果该数据在链表中，那么删除数据对应的结点，然后将其添加到头结点的位置。")]),s._v(" "),a("li",[s._v("如果此数据没有在链表中，那么根据缓存空间是否已满来分别进行处理。如果未满的话，那么直接插入到链表的头部；如果已满的话，那么将链表尾结点删除，将新的数据结点插入到链表的头部。")])]),s._v(" "),a("p",[s._v("由于不管缓存有没有满，都需要遍历一遍链表，因此这种方式实现的时间复杂度是 O(n)。")]),s._v(" "),a("blockquote",[a("p",[s._v("另外联系生活：比如自己容量有限，清除掉自己觉得没用的东西。")])])]),s._v(" "),a("li",[a("p",[s._v("Java 中的 LinkedHashMap 容器，使用的就是双向链表这种数据结构。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("空间换时间或者时间换空间的思想")]),s._v("：对于执行较慢的程序，可以通过消耗更多的内存（空间换时间）来进行优化；而消耗过多内存的程序，可以通过消耗更多的时间（时间换空间）来降低内存的消耗。比如双向链表中，就是空间换时间的思想，通过拿出另一个指针域来存储前驱结点地址，从而使得有些操作很方便。比如缓存结构中，也还是空间换时间的思想。先把数据加载到内存或者更快的缓存上，虽然带来了空间上消耗，但是速度却上去了。")])]),s._v(" "),a("li",[a("p",[s._v("Linux 内核很多地方也是用到了链表的。")])])]),s._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("p",[a("strong",[s._v("缓存实际上就是利用了空间换时间的设计思想")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("写链表代码是最考验逻辑思维能力的")])]),s._v(" "),a("p",[s._v("链表代码写得好坏，可以看出一个人"),a("strong",[s._v("写代码是否够细心，考虑问题是否全面，思维是否缜密")])]),s._v(" "),a("p",[a("strong",[s._v("和数组相比，链表更适合插入、删除操作频繁的场景，查询的时间复杂度较高")]),s._v("。不过，在具体软件开发中，要对数组和链表的各种性能进行对比，综合来选择使用两者中的哪一个。")]),s._v(" "),a("p",[s._v("总结一下自己对链表实现的一些注意事项吧。链表是无哨兵结点的，也就是 head 指针直接指向头结点的。")]),s._v(" "),a("ol",[a("li",[s._v("对于插入位置已经确定了的，比如 insertToHead 或者 insertToTail 来说，需要考虑是不是第一个插入的问题；")]),s._v(" "),a("li",[s._v("对于插入位置不确定的，比如 insertAfter insertBefore 来说，除了判断是否是空链表之外，还需要判断是否找到相关的插入的结点，以及找到的结点的位置，个人觉得分别三个，第一个结点、中间结点、尾结点；")]),s._v(" "),a("li",[s._v("对于删除位置不确定的，几乎同上。")]),s._v(" "),a("li",[s._v("对于查找来说，几乎也是一样的，判断是否是空链表，判断怎么样才算是找到了结点，怎样又算没找到结点。")])]),s._v(" "),a("p",[s._v("写链表代码还是主要为了"),a("strong",[s._v("锻炼写代码的能力，倒不是思考解决办法")]),s._v("。像环的检测这种解决办法我也想不出来，都是看了答案之后恍然大悟。")])])}),[],!1,null,null,null);a.default=v.exports}}]);