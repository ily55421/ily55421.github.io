(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{655:function(s,n,a){"use strict";a.r(n);var e=a(0),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"_20-方法内联-上"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_20-方法内联-上"}},[s._v("#")]),s._v(" 20 | 方法内联（上）")]),s._v(" "),n("p",[s._v("在前面的篇章中，我多次提到了方法内联这项技术。它指的是：在编译过程中遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。")]),s._v(" "),n("p",[s._v("方法内联不仅可以消除调用本身带来的性能开销，还可以进一步触发更多的优化。因此，它可以算是编译优化里最为重要的一环。")]),s._v(" "),n("p",[s._v("以 getter/setter 为例，如果没有方法内联，在调用 getter/setter  时，程序需要保存当前方法的执行位置，创建并压入用于 getter/setter  的栈帧、访问字段、弹出栈帧，最后再恢复当前方法的执行。而当内联了对 getter/setter 的方法调用后，上述操作仅剩字段访问。")]),s._v(" "),n("p",[s._v("在 C2 中，方法内联是在解析字节码的过程中完成的。每当碰到方法调用字节码时，C2 将决定是否需要内联该方法调用。如果需要内联，则开始解析目标方法的字节码。")]),s._v(" "),n("blockquote",[n("p",[s._v("复习一下：即时编译器首先解析字节码，并生成 IR 图，然后在该 IR  图上进行优化。优化是由一个个独立的优化阶段（optimization phase）串联起来的。每个优化阶段都会对 IR  图进行转换。最后即时编译器根据 IR 图的节点以及调度顺序生成机器码。")])]),s._v(" "),n("p",[s._v("同 C2 一样，Graal 也会在解析字节码的过程中进行方法调用的内联。此外，Graal 还拥有一个独立的优化阶段，来寻找指代方法调用的  IR 节点，并将之替换为目标方法的 IR 图。这个过程相对来说比较形象一些，因此，今天我就利用它来给你讲解一下方法内联。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\n方法内联的过程\n\npublic static boolean flag = true;\n\npublic static int value0 = 0;\n\npublic static int value1 = 1;\n\n \n\npublic static int foo(int value) {\n\n    int result = bar(flag);\n\n    if (result != 0) {\n\n        return result;\n\n    } else {\n\n        return value;\n\n    }\n\n}\n\n \n\npublic static int bar(boolean flag) {\n\n    return flag ? value0 : value1;\n\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br")]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br")])]),n("p",[s._v("上面这段代码中的 foo 方法将接收一个 int 类型的参数，而 bar 方法将接收一个 boolean 类型的参数。其中，foo方法会读取静态字段 flag 的值，并作为参数调用 bar 方法。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/05/31/image-20220531144452764-bea72a.png",alt:"image-20220531144452764"}})]),s._v(" "),n("p",[n("strong",[s._v("foo 方法的 IR 图（内联前）")])]),s._v(" "),n("p",[s._v("在编译 foo 方法时，其对应的 IR 图中将出现对 bar 方法的调用，即上图中的 5 号 Invoke 节点。如果内联算法判定应当内联对 bar 方法的调用时，那么即时编译器将开始解析 bar 方法的字节码，并生成对应的 IR 图，如下图所示。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/05/31/image-20220531144522056-c84024.png",alt:"image-20220531144522056"}})]),s._v(" "),n("p",[n("strong",[s._v("bar 方法的 IR 图")])]),s._v(" "),n("p",[s._v("接下来，即时编译器便可以进行方法内联，把 bar 方法所对应的 IR 图纳入到对 foo 方法的编译中。具体的操作便是将 foo 方法的 IR 图中 5 号 Invoke 节点替换为 bar 方法的 IR 图。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/05/31/index-a2eb77.png",alt:"index"}})]),s._v(" "),n("p",[n("strong",[s._v("foo 方法的 IR 图（内联后）")])]),s._v(" "),n("p",[s._v("除了将被调用方法的 IR 图节点复制到调用者方法的 IR 图中，即时编译器还需额外完成下述三项操作。")]),s._v(" "),n("p",[s._v("第一，被调用方法的传入参数节点，将被替换为调用者方法进行方法调用时所传入参数对应的节点。在我们的例子中，就是将 bar 方法 IR 图中的 1 号 P(0) 节点替换为 foo 方法 IR 图中的 3 号 LoadField 节点。")]),s._v(" "),n("p",[s._v("第二，在调用者方法的 IR 图中，所有指向原方法调用节点的数据依赖将重新指向被调用方法的返回节点。如果被调用方法存在多个返回节点，则生成一个 Phi 节点，将这些返回值聚合起来，并作为原方法调用节点的替换对象。")]),s._v(" "),n("p",[s._v("在我们的例子中，就是将 8 号 == 节点，以及 12 号 Return 节点连接到原 5 号 Invoke 节点的边，重新指向新生成的 24 号 Phi 节点中。")]),s._v(" "),n("p",[s._v("第三，如果被调用方法将抛出某种类型的异常，而调用者方法恰好有该异常类型的处理器，并且该异常处理器覆盖这一方法调用，那么即时编译器需要将被调用方法抛出异常的路径，与调用者方法的异常处理器相连接。")]),s._v(" "),n("p",[s._v("经过方法内联之后，即时编译器将得到一个新的 IR 图，并且在接下来的编译过程中对这个新的 IR 图进行进一步的优化。不过在上面这个例子中，方法内联后的 IR 图并没有能够进一步优化的地方。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\npublic final static boolean flag = true;\n\npublic final static int value0 = 0;\n\npublic final static int value1 = 1;\n\n \n\npublic static int foo(int value) {\n\n    int result = bar(flag);\n\n    if (result != 0) {\n\n        return result;\n\n    } else {\n\n        return value;\n\n    }\n\n}\n\n \n\npublic static int bar(boolean flag) {\n\n    return flag ? value0 : value1;\n\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])]),n("p",[s._v("不过，如果我们将代码中的三个静态字段标记为 final，那么 Java 编译器（注意不是即时编译器）会将它们编译为常量值（ConstantValue），并且在字节码中直接使用这些常量值，而非读取静态字段。举例来说，bar 方法对应的字节码如下所示。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\npublic static int bar(boolean);\n\n  Code:\n\n     0: iload_0\n\n     1: ifeq          8\n\n     4: iconst_0\n\n     5: goto          9\n\n     8: iconst_1\n\n     9: ireturn\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("在编译 foo 方法时，一旦即时编译器决定要内联对 bar 方法的调用，那么它会将调用 bar 方法所使用的参数，也就是常数 1，替换 bar 方法  IR 图中的参数。经过死代码消除之后，bar 方法将直接返回常数 0，所需复制的 IR 图也只有常数 0 这么一个节点。")]),s._v(" "),n("p",[s._v("经过方法内联之后，foo 方法的 IR 图将变成如下所示：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/05/31/image-20220531144550821-ee79af.png",alt:"image-20220531144550821"}})]),s._v(" "),n("p",[s._v("该 IR 图可以进一步优化（死代码消除），并最终得到这张极为简单的 IR 图：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/05/31/image-20220531144557378-b8be7f.png",alt:"image-20220531144557378"}})]),s._v(" "),n("h2",{attrs:{id:"方法内联的条件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法内联的条件"}},[s._v("#")]),s._v(" 方法内联的条件")]),s._v(" "),n("p",[s._v("方法内联能够触发更多的优化。通常而言，内联越多，生成代码的执行效率越高。然而，对于即时编译器来说，内联越多，编译时间也就越长，而程序达到峰值性能的时刻也将被推迟。")]),s._v(" "),n("p",[s._v("此外，内联越多也将导致生成的机器码越长。在 Java 虚拟机里，编译生成的机器码会被部署到 Code Cache 之中。这个 Code Cache 是有大小限制的（由 Java 虚拟机参数 -XX:ReservedCodeCacheSize 控制）。")]),s._v(" "),n("p",[s._v("这就意味着，生成的机器码越长，越容易填满 Code Cache，从而出现 Code Cache 已满，即时编译已被关闭的警告信息（CodeCache is full. Compiler has been disabled）。")]),s._v(" "),n("p",[s._v("因此，即时编译器不会无限制地进行方法内联。下面我便列举即时编译器的部分内联规则。（其他的特殊规则，如自动拆箱总会被内联、Throwable 类的方法不能被其他类中的方法所内联，你可以直接参考"),n("a",{attrs:{href:"http://hg.openjdk.java.net/jdk/jdk/file/da387726a4f5/src/hotspot/share/opto/bytecodeInfo.cpp#l197",target:"_blank",rel:"noopener noreferrer"}},[s._v("JDK 的源代码"),n("OutboundLink")],1),s._v("。）")]),s._v(" "),n("p",[n("strong",[s._v("首先，由 -XX:CompileCommand 中的 inline 指令指定的方法，以及由 @ForceInline 注解的方法（仅限于 JDK 内部方法），会被强制内联。")]),s._v(" 而由 -XX:CompileCommand 中的 dontinline 指令或 exclude 指令（表示不编译）指定的方法，以及由 @DontInline 注解的方法（仅限于 JDK 内部方法），则始终不会被内联。")]),s._v(" "),n("p",[n("strong",[s._v("其次，如果调用字节码对应的符号引用未被解析、目标方法所在的类未被初始化，或者目标方法是 native 方法，都将导致方法调用无法内联。")])]),s._v(" "),n("p",[n("strong",[s._v("再次，C2 不支持内联超过 9 层的调用（可以通过虚拟机参数 -XX:MaxInlineLevel 调整），以及 1 层的直接递归调用（可以通过虚拟机参数 -XX:MaxRecursiveInlineLevel 调整）。")])]),s._v(" "),n("blockquote",[n("p",[s._v("如果方法 a 调用了方法 b，而方法 b 调用了方法 c，那么我们称 b 为 a 的 1 层调用，而 c 为 a 的 2 层调用。")])]),s._v(" "),n("p",[s._v("最后，即时编译器将根据方法调用指令所在的程序路径的热度，目标方法的调用次数及大小，以及当前 IR 图的大小来决定方法调用能否被内联。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://linkeq.oss-cn-chengdu.aliyuncs.com/img/2022/05/31/image-20220531144607238-095bde.png",alt:"image-20220531144607238"}})]),s._v(" "),n("p",[s._v("我在上面的表格列举了一些 C2 相关的虚拟机参数。总体来说，即时编译器中的内联算法更青睐于小方法。")]),s._v(" "),n("h2",{attrs:{id:"总结与实践"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结与实践"}},[s._v("#")]),s._v(" 总结与实践")]),s._v(" "),n("p",[s._v("今天我介绍了方法内联的过程以及条件。")]),s._v(" "),n("p",[s._v("方法内联是指，在编译过程中，当遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。")]),s._v(" "),n("p",[s._v("即时编译器既可以在解析过程中替换方法调用字节码，也可以在 IR 图中替换方法调用 IR 节点。这两者都需要将目标方法的参数以及返回值映射到当前方法来。")]),s._v(" "),n("p",[s._v("方法内联有许多规则。除了一些强制内联以及强制不内联的规则外，即时编译器会根据方法调用的层数、方法调用指令所在的程序路径的热度、目标方法的调用次数及大小，以及当前 IR 图的大小来决定方法调用能否被内联。")]),s._v(" "),n("p",[s._v("今天的实践环节，你可以利用虚拟机参数 -XX:+PrintInlining 来打印编译过程中的内联情况。具体每项内联信息所代表的意思，你可以参考"),n("a",{attrs:{href:"https://wiki.openjdk.java.net/display/HotSpot/Server+Compiler+Inlining+Messages",target:"_blank",rel:"noopener noreferrer"}},[s._v("这一网页"),n("OutboundLink")],1),s._v("。")]),s._v(" "),n("h2",{attrs:{id:"精选留言-9"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#精选留言-9"}},[s._v("#")]),s._v(" 精选留言(9)")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("木心")]),s._v(" "),n("p",[s._v("2018-09-11")]),s._v(" "),n("p",[s._v("17")]),s._v(" "),n("p",[s._v("IR只有我看不懂吗？各颜色的模块代表什么意思，还有不同钥匙的线代表什么意思？")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("godtrue")]),s._v(" "),n("p",[s._v("2018-09-10")]),s._v(" "),n("p",[s._v("2")]),s._v(" "),n("p",[s._v("方法内联，一种优化代码的手段，其目的就是想让代码执行的更快一些，它怎么做到的呢？以前记录过性能优化的思路就那么几种，让赶的快的干，如果实现不了就让干的快的多干，干的慢点少干。方法内联是采用少干活的方式来提高效率的，直接将对应方法的字节码内联过来，省下了记录切换上下文环境的时间和空间。")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("刘冠利")]),s._v(" "),n("p",[s._v("2018-09-06")]),s._v(" "),n("p",[s._v("2")]),s._v(" "),n("p",[s._v("请问final的使用对内联有多大帮助?")]),s._v(" "),n("p",[s._v("作者回复: 在(下)篇有介绍")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("金龟")]),s._v(" "),n("p",[s._v("2019-01-28")]),s._v(" "),n("p",[s._v("默认的内联时机是什么样的呢？比如默认在什么情况方法会内联")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("Geek_98716...")]),s._v(" "),n("p",[s._v("2018-10-21")]),s._v(" "),n("p",[s._v("老师，能否提供一个学习IR图的地址？")]),s._v(" "),n("p",[s._v("作者回复: 这方面的知识网上并不多。可以知乎上搜Sea of nodes IR，看R大的回答，有不少链接可以参考。")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("Leon Wong")]),s._v(" "),n("p",[s._v("2018-09-27")]),s._v(" "),n("p",[s._v("建议老师单独开个专题讲IGV生成的IR图")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("三木子")]),s._v(" "),n("p",[s._v("2018-09-07")]),s._v(" "),n("p",[s._v("请问方法内联是发生在解释执行阶段吗？这里方法调用可以理解为解释执行中的小部分解释吗？有些困惑，麻烦老师解释执行下。")]),s._v(" "),n("p",[s._v("作者回复: 方法内联只发生在即时编译器中。")]),s._v(" "),n("p",[s._v("方法调用就是字面意思。在即时编译过程中，即时编译器会将当前方法所包含的方法调用的目标方法纳入编译范围中。")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("Scott")]),s._v(" "),n("p",[s._v("2018-09-05")]),s._v(" "),n("p",[s._v("最后引入常量后foo方法两个图是一样的，后面一幅图应该if节点被优化掉了吧，直接返回0了。")]),s._v(" "),n("p",[s._v("作者回复: 多谢指出！")]),s._v(" "),n("ul",[n("li")]),s._v(" "),n("p",[s._v("皮卡皮卡丘")]),s._v(" "),n("p",[s._v("2018-09-05")]),s._v(" "),n("p",[s._v("这个是方法内联信息吗，怎么和代码里的信息有差别？@ 1   java.lang.Object::"),n("init",[s._v(" (1 bytes)\n@ 5   java.lang.AbstractStringBuilder::appendNull (56 bytes)   callee is too large\n@ 10   java.lang.String::length (6 bytes)\n@ 21   java.lang.AbstractStringBuilder::ensureCapacityInternal (27 bytes)\n@ 17   java.lang.AbstractStringBuilder::newCapacity (39 bytes)   callee is too large\n@ 20   java.util.Arrays::copyOf (19 bytes)\n@ 11   java.lang.Math::min (11 bytes)\n@ 14   java.lang.System::arraycopy (0 bytes)   intrinsic\n@ 35   java.lang.String::getChars (62 bytes)   callee is too large\n@ 1   java.lang.Object::"),n("init",[s._v(" (1 bytes)\n@ 13  java/lang/StringIndexOutOfBoundsException::"),n("init",[s._v(" (not loaded)   not inlineable\n@ 30  java/lang/StringIndexOutOfBoundsException::"),n("init",[s._v(" (not loaded)   not inlineable\n@ 65  java/lang/StringIndexOutOfBoundsException::"),n("init",[s._v(" (not loaded)   not inlineable\n@ 75   java.util.Arrays::copyOfRange (63 bytes)   callee is too large\n@ 17   java.lang.AbstractStringBuilder::newCapacity (39 bytes)   callee is too large\n@ 20   java.util.Arrays::copyOf (19 bytes)\n@ 11   java.lang.Math::min (11 bytes)\n@ 14   java.lang.System::arraycopy (0 bytes)   intrinsic\n@ 66   java.lang.String::indexOfSupplementary (71 bytes)   callee is too large\n@ 3   java.lang.String::indexOf (70 bytes)   callee is too large\n@ 1   java.lang.Character::toUpperCase (9 bytes)")])],1)],1)],1)],1)],1),s._v(" "),n("p",[s._v("作者回复: PrintInlining将打印JVM里所有即时编译的内联优化信息，所以看起来比较杂")])])}),[],!1,null,null,null);n.default=t.exports}}]);